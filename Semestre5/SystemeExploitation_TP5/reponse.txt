L'exécution de ce programme provoque l'affichage d'un PID et d'une série d'adresses
On y trouve notamment le fichier maps qui donne la liste des régions associées à ce processus.
Pour chaque région nous trouvons son espace adressable, les protections,
l'offset (le décalage), le numéro du périphérique (majeur:mineur) et un numéro de i-node

gcc region.c -static -o region
Resultat de la commande (partiel) : ./region

00400000-004ca000 r-xp 00000000 08:02 11018952                           /home/quentin/Documents/L3 Luminy/Enseignements/Système d'exploitation/TP5/region
006c9000-006cc000 rw-p 000c9000 08:02 11018952                           /home/quentin/Documents/L3 Luminy/Enseignements/Système d'exploitation/TP5/region

Pourquoi le même fichier dans deux régions ?

1 : Zone du code du programme (offset à O)
2 : Zone des données du programme (offset de 000c9000)

une_globale = dans la région du processus /home/quentin/Documents/L3 Luminy/Enseignements/Système d'exploitation/TP5/region (2eme)
une_locale = dans la région de [stack]
alloc = dans la région d'un processus inconnu
une_fonction (main()) = dans la région du processus /home/quentin/Documents/L3 Luminy/Enseignements/Système d'exploitation/TP5/region (1er)
une_constante = dans la région dans la région du processus /home/quentin/Documents/L3 Luminy/Enseignements/Système d'exploitation/TP5/region (1er)

[heap] :
[stack] : région des variables locales
[vvar] :
[vdso] : Virtual Dynamically-linked Shared Object =>  page spéciale créée par le noyau contenant le code pour faire l'appel système
[syscall] :



mprotect : applique une protection sur une région de la mémoire
int mprotect(void *addr, size_t len, int prot);
PROT_WRITE : Droit d'écriture seulement
PROT_READ :  Droit de lecture seulement
PROT_NONE :  Aucun droit
